{"ast":null,"code":"import { ref } from 'vue';\nimport { router } from '@/router';\nimport VueRouter from 'vue-router';\nimport { useStore } from 'vuex';\nimport { Form, Field } from 'vee-validate';\nimport * as Yup from 'yup';\nexport default {\n  components: {\n    Form: Form,\n    Field: Field\n  },\n  data: function data() {\n    return {\n      showPassword: false,\n      password: null\n    };\n  },\n  computed: {\n    buttonLabel: function buttonLabel() {\n      return this.showPassword ? 'Hide' : 'Show';\n    }\n  },\n  methods: {\n    toggleShow: function toggleShow() {\n      this.showPassword = !this.showPassword;\n    }\n  },\n  setup: function setup() {\n    var users = localStorage.getItem('storedData');\n    if (users === null) {\n      var password = [{\n        email: 'admin@example.com',\n        password: '123456'\n      }];\n      var jsonData = JSON.stringify(password);\n      localStorage.setItem('storedData', jsonData);\n    }\n    var schema = Yup.object().shape({\n      email: Yup.string().required('Email is required').email('Email is invalid'),\n      password: Yup.string().min(6, 'Password must be at least 6 characters').required('Password is required')\n    });\n    var onSubmit = function onSubmit(values) {\n      document.getElementById('email').innerHTML = '';\n      document.getElementById('password').innerHTML = '';\n      var data = localStorage.getItem('storedData');\n      var Pdata = JSON.parse(data);\n      var Eresult = Pdata.find(function (_ref) {\n        var email = _ref.email;\n        return email === values.email;\n      });\n      if (Eresult) {\n        if (Eresult.password === values.password) {\n          router.push('/index');\n        } else {\n          document.getElementById('password').innerHTML = 'Incorrect password';\n        }\n      } else {\n        document.getElementById('email').innerHTML = 'Email is not valid';\n      }\n    };\n    return {\n      schema: schema,\n      onSubmit: onSubmit,\n      checked: ref(false)\n    };\n  }\n};","map":{"version":3,"mappings":"AAqHA,SAASA,GAAE,QAAS,KAAK;AACzB,SAASC,MAAK,QAAS,UAAU;AACjC,OAAOC,SAAQ,MAAO,YAAY;AAClC,SAASC,QAAO,QAAS,MAAM;AAC/B,SAASC,IAAI,EAAEC,KAAI,QAAS,cAAc;AAC1C,OAAO,KAAKC,GAAE,MAAO,KAAK;AAC1B,eAAe;EACbC,UAAU,EAAE;IACVH,IAAI,EAAJA,IAAI;IACJC,KAAK,EAALA;EACF,CAAC;EACDG,IAAI,kBAAG;IACL,OAAO;MACLC,YAAY,EAAE,KAAK;MACnBC,QAAQ,EAAE;IACZ,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRC,WAAW,yBAAG;MACZ,OAAO,IAAI,CAACH,YAAW,GAAI,MAAK,GAAI,MAAM;IAC5C;EACF,CAAC;EACDI,OAAO,EAAE;IACPC,UAAU,wBAAG;MACX,IAAI,CAACL,YAAW,GAAI,CAAC,IAAI,CAACA,YAAY;IACxC;EACF,CAAC;EACDM,KAAK,mBAAG;IACN,IAAIC,KAAI,GAAIC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;IAC9C,IAAIF,KAAI,KAAM,IAAI,EAAE;MAClB,IAAIN,QAAO,GAAI,CACb;QACES,KAAK,EAAE,mBAAmB;QAC1BT,QAAQ,EAAE;MACZ,CAAC,CACF;MACD,IAAMU,QAAO,GAAIC,IAAI,CAACC,SAAS,CAACZ,QAAQ,CAAC;MACzCO,YAAY,CAACM,OAAO,CAAC,YAAY,EAAEH,QAAQ,CAAC;IAC9C;IACA,IAAMI,MAAK,GAAIlB,GAAG,CAACmB,MAAM,EAAE,CAACC,KAAK,CAAC;MAChCP,KAAK,EAAEb,GAAG,CAACqB,MAAM,EAAC,CACfC,QAAQ,CAAC,mBAAmB,EAC5BT,KAAK,CAAC,kBAAkB,CAAC;MAC5BT,QAAQ,EAAEJ,GAAG,CAACqB,MAAM,EAAC,CAClBE,GAAG,CAAC,CAAC,EAAE,wCAAwC,EAC/CD,QAAQ,CAAC,sBAAsB;IACpC,CAAC,CAAC;IACF,IAAME,QAAO,GAAI,SAAXA,QAAO,CAAKC,MAAM,EAAK;MAC3BC,QAAQ,CAACC,cAAc,CAAC,OAAO,CAAC,CAACC,SAAQ,GAAI,EAAE;MAC/CF,QAAQ,CAACC,cAAc,CAAC,UAAU,CAAC,CAACC,SAAQ,GAAI,EAAE;MAClD,IAAI1B,IAAG,GAAIS,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;MAC7C,IAAIiB,KAAI,GAAId,IAAI,CAACe,KAAK,CAAC5B,IAAI,CAAC;MAC5B,IAAM6B,OAAM,GAAIF,KAAK,CAACG,IAAI,CAAC;QAAA,IAAGnB,KAAI,QAAJA,KAAI;QAAA,OAAQA,KAAI,KAAMY,MAAM,CAACZ,KAAK;MAAA,EAAC;MACjE,IAAIkB,OAAO,EAAE;QACX,IAAIA,OAAO,CAAC3B,QAAO,KAAMqB,MAAM,CAACrB,QAAQ,EAAE;UACxCT,MAAM,CAACsC,IAAI,CAAC,QAAQ,CAAC;QACvB,OAAO;UACLP,QAAQ,CAACC,cAAc,CAAC,UAAU,CAAC,CAACC,SAAQ,GAAI,oBAAoB;QACtE;MACF,OAAO;QACLF,QAAQ,CAACC,cAAc,CAAC,OAAO,CAAC,CAACC,SAAQ,GAAI,oBAAoB;MACnE;IACF,CAAC;IACD,OAAO;MACLV,MAAM,EAANA,MAAM;MACNM,QAAQ,EAARA,QAAQ;MACRU,OAAO,EAAExC,GAAG,CAAC,KAAK;IACpB,CAAC;EACH;AACF,CAAC","names":["ref","router","VueRouter","useStore","Form","Field","Yup","components","data","showPassword","password","computed","buttonLabel","methods","toggleShow","setup","users","localStorage","getItem","email","jsonData","JSON","stringify","setItem","schema","object","shape","string","required","min","onSubmit","values","document","getElementById","innerHTML","Pdata","parse","Eresult","find","push","checked"],"sourceRoot":"","sources":["/home/jesus-adson/projects/erp-front/src/modules/auth/views/login.vue"],"sourcesContent":["<template>\n  <div>\n    <!-- Main Wrapper -->\n    <div class=\"main-wrapper login-body\">\n      <div class=\"login-wrapper\">\n        <div class=\"container\">\n          <div class=\"loginbox\">\n            <!-- <div class=\"login-left\">\n              <img\n                class=\"img-fluid\"\n                src=\"../../../../assets/img/login.png\"\n                alt=\"Logo\"\n              />\n            </div> -->\n            <div class=\"login-right\">\n              <div class=\"login-right-wrap\">\n                <h1>Welcome to Preskool</h1>\n                <p class=\"account-subtitle\">\n                  Need an account?\n                  <router-link to=\"register\">Sign Up</router-link>\n                </p>\n                <h2>Sign in</h2>\n\n                <!-- Form -->\n                <Form\n                  class=\"login\"\n                  @submit=\"onSubmit\"\n                  :validation-schema=\"schema\"\n                  v-slot=\"{ errors }\"\n                >\n                  <div class=\"form-group\">\n                    <label>Username <span class=\"login-danger\">*</span></label>\n                    <Field\n                      name=\"email\"\n                      type=\"text\"\n                      value=\"admin@example.com\"\n                      class=\"form-control\"\n                      :class=\"{ 'is-invalid': errors.email }\"\n                    />\n                    <span class=\"profile-views\"\n                      ><i class=\"fas fa-user-circle\"></i\n                    ></span>\n                    <div class=\"invalid-feedback\">{{ errors.email }}</div>\n                    <div class=\"emailshow text-danger\" id=\"email\"></div>\n                  </div>\n                  <div class=\"form-group password-icon\">\n                    <label>Password <span class=\"login-danger\">*</span></label>\n                    <Field\n                      v-if=\"showPassword\"\n                      name=\"password\"\n                      type=\"text\"\n                      value=\"123456\"\n                      class=\"form-control pass-input\"\n                      :class=\"{ 'is-invalid': errors.password }\"\n                    />\n                    <Field\n                      v-else\n                      name=\"password\"\n                      type=\"password\"\n                      value=\"123456\"\n                      class=\"form-control pass-input\"\n                      :class=\"{ 'is-invalid': errors.password }\"\n                    />\n                    <span\n                      @click=\"toggleShow\"\n                      class=\"profile-views toggle-password\"\n                      :class=\"{\n                        'feather-eye': showPassword,\n                        'feather-eye-off': !showPassword,\n                      }\"\n                    ></span>\n                    <div class=\"invalid-feedback\">{{ errors.password }}</div>\n                    <div class=\"emailshow text-danger\" id=\"password\"></div>\n                  </div>\n                  <div class=\"forgotpass\">\n                    <div class=\"remember-me\">\n                      <a-checkbox v-model:checked=\"checked\" class=\"me-2 mb-0\">\n                        Remember me</a-checkbox\n                      >\n                    </div>\n                    <router-link to=\"forgot-password\"\n                      >Forgot Password?</router-link\n                    >\n                  </div>\n                  <div class=\"form-group\">\n                    <button class=\"btn btn-primary btn-block\">Login</button>\n                    <!--                    <b-button class=\"btn btn-primary btn-block\" type=\"submit\"-->\n                    <!--                      >Login</b-button>-->\n                  </div>\n                </Form>\n                <!-- /Form -->\n\n                <div class=\"login-or\">\n                  <span class=\"or-line\"></span>\n                  <span class=\"span-or\">or</span>\n                </div>\n\n                <!-- Social Login -->\n                <div class=\"social-login\">\n                  <a href=\"javascript:;\"\n                    ><i class=\"fab fa-google-plus-g\"></i\n                  ></a>\n                  <a href=\"javascript:;\"><i class=\"fab fa-facebook-f\"></i></a>\n                  <a href=\"javascript:;\"><i class=\"fab fa-twitter\"></i></a>\n                  <a href=\"javascript:;\"><i class=\"fab fa-linkedin-in\"></i></a>\n                </div>\n                <!-- /Social Login -->\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <!-- /Main Wrapper -->\n  </div>\n</template>\n<script>\nimport { ref } from 'vue';\nimport { router } from '@/router';\nimport VueRouter from 'vue-router';\nimport { useStore } from 'vuex';\nimport { Form, Field } from 'vee-validate';\nimport * as Yup from 'yup';\nexport default {\n  components: {\n    Form,\n    Field,\n  },\n  data() {\n    return {\n      showPassword: false,\n      password: null,\n    };\n  },\n  computed: {\n    buttonLabel() {\n      return this.showPassword ? 'Hide' : 'Show';\n    },\n  },\n  methods: {\n    toggleShow() {\n      this.showPassword = !this.showPassword;\n    },\n  },\n  setup() {\n    let users = localStorage.getItem('storedData');\n    if (users === null) {\n      let password = [\n        {\n          email: 'admin@example.com',\n          password: '123456',\n        },\n      ];\n      const jsonData = JSON.stringify(password);\n      localStorage.setItem('storedData', jsonData);\n    }\n    const schema = Yup.object().shape({\n      email: Yup.string()\n        .required('Email is required')\n        .email('Email is invalid'),\n      password: Yup.string()\n        .min(6, 'Password must be at least 6 characters')\n        .required('Password is required'),\n    });\n    const onSubmit = (values) => {\n      document.getElementById('email').innerHTML = '';\n      document.getElementById('password').innerHTML = '';\n      let data = localStorage.getItem('storedData');\n      var Pdata = JSON.parse(data);\n      const Eresult = Pdata.find(({ email }) => email === values.email);\n      if (Eresult) {\n        if (Eresult.password === values.password) {\n          router.push('/index');\n        } else {\n          document.getElementById('password').innerHTML = 'Incorrect password';\n        }\n      } else {\n        document.getElementById('email').innerHTML = 'Email is not valid';\n      }\n    };\n    return {\n      schema,\n      onSubmit,\n      checked: ref(false),\n    };\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}